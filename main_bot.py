import os
import re
import random
import json
from dotenv import load_dotenv
from functools import wraps # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º wraps –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ConversationHandler,
    MessageHandler,
    filters,
    ContextTypes
)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
import gemini_integration
import spotify_integration

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
PLAYLIST_ID = os.getenv("SPOTIFY_PLAYLIST_ID")

# --- –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
ALLOWED_IDS_STR = os.getenv("ALLOWED_TELEGRAM_IDS", "")
ALLOWED_IDS = [int(user_id) for user_id in ALLOWED_IDS_STR.split(',') if user_id]

if not BOT_TOKEN or not ALLOWED_IDS:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –∏–ª–∏ ALLOWED_TELEGRAM_IDS. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª.")

# --- –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ ---
def allowed_users_only(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ user_id –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö.
    """
    @wraps(func)
    async def wrapped(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        user_id = update.effective_user.id
        if user_id not in ALLOWED_IDS:
            print(f"üö´ –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: {user_id}")
            await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return
        # –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞, –≤—ã–ø–æ–ª–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        return await func(update, context, *args, **kwargs)
    return wrapped

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
(PROMPT_TEST_STATE, PLAYLIST_UPDATE_STATE) = range(2)

# --- –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞  ---

@allowed_users_only
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≥–ª–∞–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏."""
    # ... (–∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è)
    keyboard = [
        [InlineKeyboardButton("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç", callback_data="prompt_test")],
        [InlineKeyboardButton("üé∂ –ò–∑–º–µ–Ω–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç Geminify", callback_data="playlist_update")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )
    
async def ask_for_query(update: Update, context: ContextTypes.DEFAULT_TYPE, mode: str) -> int:
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è, —á—Ç–æ–±—ã —Å–ø—Ä–æ—Å–∏—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ–≥–æ –∑–∞–ø—Ä–æ—Å."""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    user_id = update.effective_user.id
    if user_id not in ALLOWED_IDS:
        print(f"üö´ –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø (–Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏) –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: {user_id}")
        await context.bot.answer_callback_query(callback_query_id=update.callback_query.id, text="‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return ConversationHandler.END

    query = update.callback_query
    await query.answer()
    text = "‚úçÔ∏è –í–≤–µ–¥–∏ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è Gemini, –∏ —è –µ–≥–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É—é."
    next_state = PROMPT_TEST_STATE
    if mode == "playlist":
        text = "üéµ –û–ø–∏—à–∏, –∫–∞–∫–æ–π –ø–ª–µ–π–ª–∏—Å—Ç —Ç—ã —Ö–æ—á–µ—à—å, –∏ —è —Å–æ–∑–¥–∞–º –µ–≥–æ –¥–ª—è —Ç–µ–±—è –≤ Spotify."
        next_state = PLAYLIST_UPDATE_STATE
    await query.edit_message_text(text=text)
    return next_state

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é."""
    if update.message:
        await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    else:
        query = update.callback_query
        await query.answer()
        await query.edit_message_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç", callback_data="prompt_test")],
            [InlineKeyboardButton("üé∂ –ò–∑–º–µ–Ω–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç Geminify", callback_data="playlist_update")]
        ])
    )
    return ConversationHandler.END

# --- –õ–æ–≥–∏–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ ---

async def handle_prompt_test(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ç–µ—Å—Ç–∞, –≤—ã–∑—ã–≤–∞–µ—Ç Gemini –∏ –≤—ã–≤–æ–¥–∏—Ç –æ—Ç–≤–µ—Ç."""
    user_message = update.message.text
    await update.message.reply_text("‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –≤ Gemini...")
    
    gemini_response = await gemini_integration.get_gemini_response(user_message)
    
    await update.message.reply_text(f"ü§ñ **–û—Ç–≤–µ—Ç –æ—Ç Gemini:**\n\n{gemini_response}", parse_mode='Markdown')
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–í—ã–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç", callback_data="prompt_test")],
            [InlineKeyboardButton("üé∂ –ò–∑–º–µ–Ω–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç Geminify", callback_data="playlist_update")]
        ])
    )
    return ConversationHandler.END

# --- –õ–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–∞ ---

def parse_gemini_tracks(text: str) -> list[str]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–æ–≤ –∏–∑ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –æ—Ç Gemini."""
    # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å —Ü–∏—Ñ—Ä—ã, —Ç–æ—á–∫–∏ –∏ –ø—Ä–æ–±–µ–ª–∞
    tracks = re.findall(r'^\d+\.\s*(.+)', text, re.MULTILINE)
    return [track.strip() for track in tracks]

# –í —Ñ–∞–π–ª–µ main_bot.py

async def handle_playlist_update(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–∞ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–æ–º."""
    user_message = update.message.text
    await update.message.reply_text("‚ú® –ù–∞—á–∏–Ω–∞—é –º–∞–≥–∏—é... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –º–∏–Ω—É—Ç—ã.\n\n1Ô∏è‚É£ / 5Ô∏è‚É£ –ü–æ–ª—É—á–∞—é –ø–ª–µ–π–ª–∏—Å—Ç –æ—Ç Gemini...")
    
    gemini_response = await gemini_integration.get_gemini_response(user_message)
    tracks = parse_gemini_tracks(gemini_response)
    
    if not tracks:
        await update.message.reply_text("ü§∑‚Äç‚ôÇÔ∏è Gemini –Ω–µ –≤–µ—Ä–Ω—É–ª —Å–ø–∏—Å–æ–∫ –ø–µ—Å–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
        return await cancel(update, context)

    # --- –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä ---
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    try:
        with open('prompt_config.json', 'r', encoding='utf-8') as f:
            # üëá –í–û–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –í–ï–°–¨ —Ñ–∞–π–ª, –ø–æ—Ç–æ–º –ø–æ–ª—É—á–∞–µ–º –Ω—É–∂–Ω—É—é —á–∞—Å—Ç—å
            full_config = json.load(f)
            config = full_config.get('filter_config', {})
    except (FileNotFoundError, json.JSONDecodeError):
        config = {} # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
    initial_prob = config.get('initial_filter_probability', 80) / 100.0
    decay_rate = config.get('filter_decay_rate', 0.9)
    
    print("\n--- –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–∞ –æ—Ç Gemini ---")
    filtered_tracks = []
    for i, track in enumerate(tracks):
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–µ—Å–Ω–∏
        current_filter_prob = initial_prob * (decay_rate ** i)
        
        # –†–µ—à–∞–µ–º, –¥–æ–±–∞–≤–ª—è—Ç—å –ª–∏ —Ç—Ä–µ–∫
        if random.random() > current_filter_prob:
            status = "‚úÖ –í—ã–±—Ä–∞–Ω"
            filtered_tracks.append(track)
        else:
            status = f"‚ùå –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω (—à–∞–Ω—Å —É–¥–∞–ª–µ–Ω–∏—è {current_filter_prob:.1%})"
        
        # –ü–µ—á–∞—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç—Ä–µ–∫–∞
        print(f"{i+1}. {track} -> {status}")
    print("--------------------------------------------------\n")
            
    if not filtered_tracks:
        await update.message.reply_text("ü§∑‚Äç‚ôÇÔ∏è –ü–æ—Å–ª–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω–æ–≥–æ –æ—Ç–±–æ—Ä–∞ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!")
        return await cancel(update, context)
    
    # ... –æ—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...
    await update.message.reply_text(f"2Ô∏è‚É£ / 5Ô∏è‚É£ Gemini –ø—Ä–µ–¥–ª–æ–∂–∏–ª {len(tracks)} —Ç—Ä–µ–∫–æ–≤. –ü–æ—Å–ª–µ –æ—Ç–±–æ—Ä–∞ –æ—Å—Ç–∞–ª–æ—Å—å {len(filtered_tracks)}. –ò—â—É –∏—Ö –≤ Spotify...")
    tracks_data = await spotify_integration.get_tracks_data_async(filtered_tracks)
    
    if not tracks_data:
        await update.message.reply_text("ü§∑‚Äç‚ôÇÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–∑ –æ—Ç–æ–±—Ä–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ –≤ Spotify.")
        return await cancel(update, context)
    
    # tracks_data.reverse()
    
    access_token = spotify_integration.get_new_access_token()
    if not access_token:
        await update.message.reply_text("üî• –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ Spotify. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏.")
        return await cancel(update, context)
        
    await update.message.reply_text("3Ô∏è‚É£ / 5Ô∏è‚É£ –û—á–∏—â–∞—é —Å—Ç–∞—Ä—ã–π –ø–ª–µ–π–ª–∏—Å—Ç...")
    if not spotify_integration.clear_playlist(access_token):
        await update.message.reply_text("üî• –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏.")
        return await cancel(update, context)
        
    await update.message.reply_text(f"4Ô∏è‚É£ / 5Ô∏è‚É£ –î–æ–±–∞–≤–ª—è—é {len(tracks_data)} –Ω–æ–≤—ã—Ö —Ç—Ä–µ–∫–æ–≤...")
    if not spotify_integration.add_tracks_to_playlist(access_token, tracks_data):
        await update.message.reply_text("üî• –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫–∏ –≤ –ø–ª–µ–π–ª–∏—Å—Ç. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏.")
        return await cancel(update, context)
        
    playlist_url = f"https://open.spotify.com/playlist/{PLAYLIST_ID}"
    await update.message.reply_text(f"‚úÖ 5Ô∏è‚É£ / 5Ô∏è‚É£ –ì–æ—Ç–æ–≤–æ! –¢–≤–æ–π –Ω–æ–≤—ã–π –ø–ª–µ–π–ª–∏—Å—Ç –∑–¥–µ—Å—å: {playlist_url}")
    
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–•–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω? –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç", callback_data="prompt_test")],
            [InlineKeyboardButton("üé∂ –ò–∑–º–µ–Ω–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç Geminify", callback_data="playlist_update")]
        ])
    )
    return ConversationHandler.END

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    application = Application.builder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start), # –î–µ–∫–æ—Ä–∞—Ç–æ—Ä —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –∑–¥–µ—Å—å
            CallbackQueryHandler(lambda u, c: ask_for_query(u, c, "test"), pattern='^prompt_test$'),
            CallbackQueryHandler(lambda u, c: ask_for_query(u, c, "playlist"), pattern='^playlist_update$')
        ],
        states={
            PROMPT_TEST_STATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_prompt_test)],
            PLAYLIST_UPDATE_STATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_playlist_update)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        allow_reentry=True 
    )

    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("start", start)) # –î–æ–±–∞–≤–ª—è–µ–º –∏ –æ–±—ã—á–Ω—ã–π /start —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()