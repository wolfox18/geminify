import os
import base64
import httpx
import asyncio
import json
from dotenv import load_dotenv

load_dotenv()

CLIENT_ID = os.getenv("SPOTIFY_CLIENT_ID")
CLIENT_SECRET = os.getenv("SPOTIFY_CLIENT_SECRET")
REFRESH_TOKEN = os.getenv("SPOTIFY_REFRESH_TOKEN")
PLAYLIST_ID = os.getenv("SPOTIFY_PLAYLIST_ID")

# --- –£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–û–ö–ï–ù–û–ú –î–û–°–¢–£–ü–ê ---

def get_new_access_token():
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞."""
    # ... (–∫–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è)
    auth_string = f"{CLIENT_ID}:{CLIENT_SECRET}"
    auth_base64 = str(base64.b64encode(auth_string.encode('utf-8')), 'utf-8')
    url = "https://accounts.spotify.com/api/token"
    headers = {"Authorization": f"Basic {auth_base64}", "Content-Type": "application/x-www-form-urlencoded"}
    data = {"grant_type": "refresh_token", "refresh_token": REFRESH_TOKEN}
    
    response = httpx.post(url, headers=headers, data=data)
    if response.status_code != 200:
        print(f"üî• –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {response.json()}")
        return None
    return response.json().get("access_token")

# --- –ê–°–ò–ù–•–†–û–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –ü–û–ò–°–ö–ê ---

async def search_track_async(client: httpx.AsyncClient, track_name: str):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∏—â–µ—Ç –û–î–ò–ù —Ç—Ä–µ–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –°–õ–û–í–ê–†–¨ {–Ω–∞–∑–≤–∞–Ω–∏–µ, –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å, uri}."""
    url = "https://api.spotify.com/v1/search"
    params = {"q": track_name, "type": "track", "limit": 1}
    
    try:
        response = await client.get(url, params=params)
        response.raise_for_status()
        items = response.json().get("tracks", {}).get("items", [])
        if items:
            track_info = items[0]
            # üëá –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏
            return {
                "name": track_info.get("name"),
                "artist": track_info["artists"][0].get("name") if track_info.get("artists") else "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω",
                "uri": track_info.get("uri")
            }
        else:
            print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω: {track_name}")
            return None
    except httpx.RequestError as e:
        print(f"üî• –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ '{track_name}': {e}")
        return None

async def get_tracks_data_async(track_list: list[str]) -> list[dict]:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∏—â–µ—Ç –í–°–ï —Ç—Ä–µ–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π."""
    access_token = get_new_access_token()
    if not access_token: return []

    headers = {"Authorization": f"Bearer {access_token}"}
    
    async with httpx.AsyncClient(headers=headers) as client:
        tasks = [search_track_async(client, name) for name in track_list]
        results = await asyncio.gather(*tasks)
    
    return [track_data for track_data in results if track_data and track_data.get("uri")]

# --- –°–ò–ù–•–†–û–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–õ–ï–ô–õ–ò–°–¢–û–ú ---

def clear_playlist(access_token):
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ç—Ä–µ–∫–∏ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞."""
    # ... (–∫–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è)
    headers = {"Authorization": f"Bearer {access_token}", "Content-Type": "application/json"}
    get_tracks_url = f"https://api.spotify.com/v1/playlists/{PLAYLIST_ID}/tracks"
    response = httpx.get(get_tracks_url, headers=headers, params={"fields": "items(track(uri))"})
    if response.status_code != 200: return False
    tracks_to_delete = response.json().get("items", [])
    if not tracks_to_delete: 
        print("–ü–ª–µ–π–ª–∏—Å—Ç —É–∂–µ –ø—É—Å—Ç.")
        return True
    uris_to_delete = [{"uri": item["track"]["uri"]} for item in tracks_to_delete]
    delete_url = f"https://api.spotify.com/v1/playlists/{PLAYLIST_ID}/tracks"
    with httpx.Client() as client:
        for i in range(0, len(uris_to_delete), 100):
            chunk = uris_to_delete[i:i + 100]
            request_body = json.dumps({"tracks": chunk})
            request = httpx.Request("DELETE", delete_url, headers=headers, content=request_body)
            delete_response = client.send(request)
            if delete_response.status_code not in [200, 201]: 
                print(f"üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–æ–≤: {delete_response.text}")
                return False
    print(f"–ü–ª–µ–π–ª–∏—Å—Ç –æ—á–∏—â–µ–Ω, —É–¥–∞–ª–µ–Ω–æ {len(uris_to_delete)} —Ç—Ä–µ–∫–æ–≤.")
    return True

def add_tracks_to_playlist(access_token, tracks_data: list[dict]):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç—Ä–µ–∫–∏ –≤ –ø–ª–µ–π–ª–∏—Å—Ç –∏ –õ–û–ì–ò–†–£–ï–¢ –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—è."""
    if not tracks_data: return False
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ URI –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ API
    track_uris = [track['uri'] for track in tracks_data]

    # üëá –ò–ó–ú–ï–ù–ï–ù–ò–ï: –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ, —á—Ç–æ —Å–æ–±–∏—Ä–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å
    print("\n--- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤ –≤ –ø–ª–µ–π–ª–∏—Å—Ç Spotify ---")
    for track in tracks_data:
        print(f"üéµ {track.get('artist')} - {track.get('name')}")
    print("-------------------------------------------\n")
    
    url = f"https://api.spotify.com/v1/playlists/{PLAYLIST_ID}/tracks"
    headers = {"Authorization": f"Bearer {access_token}", "Content-Type": "application/json"}

    for i in range(0, len(track_uris), 100):
        chunk = track_uris[i:i + 100]
        response = httpx.post(url, headers=headers, json={"uris": chunk})
        if response.status_code not in [200, 201]: return False
    
    print(f"–í –ø–ª–µ–π–ª–∏—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ {len(track_uris)} –Ω–æ–≤—ã—Ö —Ç—Ä–µ–∫–æ–≤.")
    return True